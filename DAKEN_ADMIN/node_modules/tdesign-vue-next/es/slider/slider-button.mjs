/**
 * tdesign v1.9.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-2af2f3cc.mjs';
import { defineComponent, computed, inject, ref, reactive, watchEffect, nextTick, createVNode, mergeProps } from 'vue';
import { Tooltip } from '../tooltip/index.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useSliderTooltip } from './hooks/useSliderTooltip.mjs';
import { sliderPropsInjectKey } from './util/constants.mjs';
import { i as isFunction_1 } from '../_chunks/dep-c35bb50c.mjs';
import '../_chunks/dep-ca297029.mjs';
import '../tooltip/tooltip.mjs';
import '../_chunks/dep-5196116b.mjs';
import '../_chunks/dep-26ed0cac.mjs';
import '../_chunks/dep-7966403d.mjs';
import '../_chunks/dep-0659d768.mjs';
import '../_chunks/dep-5b49f687.mjs';
import '../_chunks/dep-f731006d.mjs';
import '../_chunks/dep-9672d334.mjs';
import '../_chunks/dep-6bcf8998.mjs';
import '../_chunks/dep-7d3c27b1.mjs';
import '../_chunks/dep-de53e2e8.mjs';
import '../_chunks/dep-4fb87459.mjs';
import '../_chunks/dep-2a05de08.mjs';
import '../_chunks/dep-4ee5e119.mjs';
import '../_chunks/dep-fe843970.mjs';
import '../_chunks/dep-ea111861.mjs';
import '../_chunks/dep-79da3af4.mjs';
import '../_chunks/dep-e242a06a.mjs';
import '../_chunks/dep-b59c8c62.mjs';
import '../_chunks/dep-5f0aedd7.mjs';
import '../_chunks/dep-5cb3d4ea.mjs';
import '../_chunks/dep-2d33c97a.mjs';
import '../_chunks/dep-183c499b.mjs';
import '../_chunks/dep-4e2e86d1.mjs';
import '../_chunks/dep-b76458c6.mjs';
import '../_chunks/dep-616c78b0.mjs';
import '../_chunks/dep-8ad6255c.mjs';
import '../_chunks/dep-ac0f9138.mjs';
import '../_chunks/dep-c1b8140c.mjs';
import '../_chunks/dep-f5778e4b.mjs';
import '../_chunks/dep-8ea10f6c.mjs';
import '../_chunks/dep-dee62ba9.mjs';
import '../_chunks/dep-f9e3f698.mjs';
import '../_chunks/dep-0dc95788.mjs';
import '../_chunks/dep-de4bb4cb.mjs';
import '../_chunks/dep-39423da8.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../_chunks/dep-41d56db9.mjs';
import '../_chunks/dep-3d661c92.mjs';
import '../_chunks/dep-78b9feac.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-8fde58dd.mjs';
import '../_chunks/dep-4ab8ef1f.mjs';
import '../_chunks/dep-91b73ccb.mjs';
import '../_chunks/dep-e6085593.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-91bceb4f.mjs';
import '../hooks/useCommonClassName.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-8f5d66bf.mjs';
import '../_chunks/dep-766c643b.mjs';
import '../_chunks/dep-8ce99060.mjs';
import '../_chunks/dep-5654af14.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-2b12f580.mjs';
import '../_chunks/dep-2a58ca94.mjs';
import '../_chunks/dep-115707a4.mjs';
import '../config-provider/type.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_common/js/upload/utils.mjs';
import '../_common/js/log/log.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-0714c768.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../tooltip/util.mjs';
import '../tooltip/type.mjs';
import './util/common.mjs';

var _SliderButton = defineComponent({
  name: "TSliderButton",
  props: {
    value: {
      type: [Number],
      "default": 0
    },
    vertical: {
      type: Boolean,
      "default": false
    },
    tooltipProps: {
      type: [Boolean, Object],
      "default": true
    },
    label: {
      type: [String, Boolean, Function]
    },
    range: {
      type: Boolean,
      "default": false
    },
    position: {
      type: String
    }
  },
  emits: ["input", "mouseup"],
  setup: function setup(props, ctx) {
    var COMPONENT_NAME = usePrefixClass("slider__button");
    var tooltipConfig = computed(function () {
      return props;
    });
    var _useSliderTooltip = useSliderTooltip(tooltipConfig),
      tooltipRef = _useSliderTooltip.tooltipRef,
      tooltipProps = _useSliderTooltip.tooltipProps,
      toggleTooltip = _useSliderTooltip.toggleTooltip,
      showTooltip = _useSliderTooltip.showTooltip;
    var parentProps = inject(sliderPropsInjectKey);
    var buttonRef = ref();
    var dragged = ref(false);
    var slideButtonProps = reactive({
      dragging: false,
      isClick: false,
      startX: 0,
      startY: 0,
      startPos: 0,
      newPos: null
    });
    var rangeDiff = computed(function () {
      return Number(parentProps.max) - Number(parentProps.min);
    });
    var currentPos = computed(function () {
      return "".concat((props.value - parentProps.min) / rangeDiff.value * 100, "%");
    });
    var step = computed(function () {
      return parentProps.step;
    });
    var wrapperStyle = computed(function () {
      return props.vertical ? {
        bottom: currentPos.value
      } : {
        left: currentPos.value
      };
    });
    watchEffect(function () {
      parentProps.toggleDragging(slideButtonProps.dragging);
    });
    var setPosition = function setPosition(pos) {
      var newPos = pos;
      if (newPos === null || Number.isNaN(newPos)) {
        return;
      }
      if (newPos > 100) {
        newPos = 100;
      } else if (newPos < 0) {
        newPos = 0;
      }
      var perStepLen = 100 * step.value / rangeDiff.value;
      var steps = Math.round(newPos / perStepLen);
      var value = steps * perStepLen * rangeDiff.value * 0.01;
      value += parentProps.min;
      value = Number(parseFloat("".concat(value)).toFixed(parentProps.precision));
      ctx.emit("input", value);
      nextTick(function () {
        var _tooltipRef$value$upd, _tooltipRef$value;
        tooltipRef.value && ((_tooltipRef$value$upd = (_tooltipRef$value = tooltipRef.value).updatePopper) === null || _tooltipRef$value$upd === void 0 ? void 0 : _tooltipRef$value$upd.call(_tooltipRef$value));
      });
    };
    var handleMouseEnter = function handleMouseEnter() {
      buttonRef.value.focus();
      toggleTooltip(true);
    };
    var handleMouseLeave = function handleMouseLeave() {
      if (!slideButtonProps.dragging) {
        toggleTooltip(false);
      }
    };
    var onDragStart = function onDragStart(event) {
      slideButtonProps.dragging = true;
      slideButtonProps.isClick = true;
      var type = event.type;
      var clientY = event.clientY,
        clientX = event.clientX;
      if (type === "touchstart") {
        var touch = event.touches;
        var _ref = [touch[0].clientY, touch[0].clientX];
        clientY = _ref[0];
        clientX = _ref[1];
      }
      if (props.vertical) {
        slideButtonProps.startY = clientY;
      } else {
        slideButtonProps.startX = clientX;
      }
      slideButtonProps.startPos = parseFloat(currentPos.value);
      slideButtonProps.newPos = slideButtonProps.startPos;
    };
    var onDragging = function onDragging(e) {
      var event = e;
      if (!slideButtonProps.dragging) {
        return;
      }
      dragged.value = true;
      slideButtonProps.isClick = false;
      if (parentProps !== null && parentProps !== void 0 && parentProps.resetSize && isFunction_1(parentProps === null || parentProps === void 0 ? void 0 : parentProps.resetSize)) {
        parentProps.resetSize();
      }
      var diff = 0;
      var parentSliderSize = parentProps.sliderSize;
      if (props.vertical) {
        diff = slideButtonProps.startY - event.clientY;
      } else {
        diff = event.clientX - slideButtonProps.startX;
      }
      diff = diff / parentSliderSize * 100;
      slideButtonProps.newPos = slideButtonProps.startPos + diff;
      setPosition(slideButtonProps.newPos);
    };
    var onDragEnd = function onDragEnd() {
      if (slideButtonProps.dragging) {
        setTimeout(function () {
          slideButtonProps.dragging = false;
          toggleTooltip(false);
          if (!slideButtonProps.isClick) {
            setPosition(slideButtonProps.newPos);
          }
          dragged.value && ctx.emit("mouseup");
          dragged.value = false;
        }, 0);
        window.removeEventListener("mousemove", onDragging);
        window.removeEventListener("touchmove", onDragging);
        window.removeEventListener("mouseup", onDragEnd);
        window.removeEventListener("touchend", onDragEnd);
        window.removeEventListener("contextmenu", onDragEnd);
      }
    };
    function onButtonDown(event) {
      if (parentProps.disabled) {
        return;
      }
      event.preventDefault();
      onDragStart(event);
      window.addEventListener("mousemove", onDragging);
      window.addEventListener("mouseup", onDragEnd);
      window.addEventListener("touchmove", onDragging);
      window.addEventListener("touchend", onDragEnd);
      window.addEventListener("contextmenu", onDragEnd);
    }
    var onKeyDown = function onKeyDown(state) {
      if (parentProps.disabled) {
        return;
      }
      var stepLength = step.value / rangeDiff.value * 100;
      if (state === "sub") {
        stepLength = -stepLength;
      }
      slideButtonProps.newPos = parseFloat(currentPos.value) + stepLength;
      setPosition(slideButtonProps.newPos);
    };
    var onNativeKeyDown = function onNativeKeyDown(e) {
      var code = e.code;
      e.preventDefault();
      if (code === "ArrowDown" || code === "ArrowLeft") {
        onKeyDown("sub");
      }
      if (code === "ArrowUp" || code === "ArrowRight") {
        onKeyDown("add");
      }
    };
    ctx.expose({
      setPosition: setPosition
    });
    return function () {
      return createVNode("div", {
        "ref": buttonRef,
        "class": "".concat(COMPONENT_NAME.value, "-wrapper"),
        "style": wrapperStyle.value,
        "tabindex": "0",
        "show-tooltip": showTooltip.value,
        "disabled": parentProps.disabled,
        "onmouseenter": handleMouseEnter,
        "onmouseleave": handleMouseLeave,
        "onmousedown": onButtonDown,
        "onTouchstart": onButtonDown,
        "onfocus": handleMouseEnter,
        "onblur": handleMouseLeave,
        "onKeydown": onNativeKeyDown
      }, [createVNode(Tooltip, mergeProps({
        "ref": tooltipRef,
        "hideEmptyPopup": true,
        "disabled": !showTooltip.value
      }, tooltipProps.value), {
        "default": function _default() {
          return [createVNode("div", {
            "class": [COMPONENT_NAME.value, _defineProperty({}, "".concat(COMPONENT_NAME.value, "--dragging"), slideButtonProps.dragging)]
          }, null)];
        }
      })]);
    };
  }
});

export { _SliderButton as default };
//# sourceMappingURL=slider-button.mjs.map
