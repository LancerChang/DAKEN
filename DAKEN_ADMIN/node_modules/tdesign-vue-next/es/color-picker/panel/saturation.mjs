/**
 * tdesign v1.9.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-2af2f3cc.mjs';
import { defineComponent, ref, reactive, computed, nextTick, onMounted, onBeforeUnmount, createVNode } from 'vue';
import '../const.mjs';
import '../utils/index.mjs';
import { useBaseClassName } from '../hooks.mjs';
import baseProps from './base-props.mjs';
import { SATURATION_PANEL_DEFAULT_WIDTH, SATURATION_PANEL_DEFAULT_HEIGHT } from '../../_common/js/color-picker/constants.mjs';
import { Draggable } from '../../_common/js/color-picker/draggable.mjs';
import '../../_chunks/dep-ca297029.mjs';
import '../../_common/js/color-picker/index.mjs';
import '../../_common/js/color-picker/cmyk.mjs';
import '../../_common/js/color-picker/color.mjs';
import '../../_chunks/dep-5196116b.mjs';
import '../../_chunks/dep-26ed0cac.mjs';
import '../../_chunks/dep-db66fb97.mjs';
import '../../_chunks/dep-83ed1aa0.mjs';
import '../../_common/js/color-picker/gradient.mjs';
import '../../_chunks/dep-78b9feac.mjs';
import '../../_chunks/dep-0659d768.mjs';
import '../../_chunks/dep-f731006d.mjs';
import '../../_chunks/dep-9672d334.mjs';
import '../../_chunks/dep-6bcf8998.mjs';
import '../../_chunks/dep-de53e2e8.mjs';
import '../../_chunks/dep-eb726c0b.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-c35bb50c.mjs';
import '../../_chunks/dep-79da3af4.mjs';
import '../../_chunks/dep-e242a06a.mjs';
import '../../_chunks/dep-8f5d66bf.mjs';
import '../../_chunks/dep-4fb87459.mjs';
import '../../_chunks/dep-2a05de08.mjs';
import '../../_chunks/dep-4ee5e119.mjs';
import '../../_chunks/dep-fe843970.mjs';
import '../../_chunks/dep-ea111861.mjs';
import '../../_chunks/dep-b59c8c62.mjs';
import '../../_chunks/dep-5f0aedd7.mjs';
import '../../_chunks/dep-5cb3d4ea.mjs';
import '../../_chunks/dep-2d33c97a.mjs';
import '../../_chunks/dep-183c499b.mjs';
import '../../_chunks/dep-4e2e86d1.mjs';
import '../../_chunks/dep-b76458c6.mjs';
import '../../_chunks/dep-616c78b0.mjs';
import '../../_chunks/dep-8ad6255c.mjs';
import '../../_chunks/dep-ac0f9138.mjs';
import '../../_chunks/dep-c1b8140c.mjs';
import '../../_chunks/dep-766c643b.mjs';
import '../../_chunks/dep-8ce99060.mjs';
import '../../_chunks/dep-39423da8.mjs';
import '../../_chunks/dep-de4bb4cb.mjs';
import '../../_chunks/dep-f9e3f698.mjs';
import '../../_chunks/dep-5654af14.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-2b12f580.mjs';
import '../../_chunks/dep-2a58ca94.mjs';
import '../../_chunks/dep-115707a4.mjs';
import '../../config-provider/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var SaturationPanel = defineComponent({
  name: "SaturationPanel",
  props: _objectSpread({}, baseProps),
  setup: function setup(props) {
    var baseClassName = useBaseClassName();
    var refPanel = ref(null);
    var refThumb = ref(null);
    var dragInstance = ref(null);
    var panelRect = reactive({
      width: SATURATION_PANEL_DEFAULT_WIDTH,
      height: SATURATION_PANEL_DEFAULT_HEIGHT
    });
    var styles = computed(function () {
      var _props$color = props.color,
        saturation = _props$color.saturation,
        value = _props$color.value;
      var width = panelRect.width,
        height = panelRect.height;
      var top = Math.round((1 - value) * height);
      var left = Math.round(saturation * width);
      return {
        color: props.color.rgb,
        left: "".concat(left, "px"),
        top: "".concat(top, "px")
      };
    });
    var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate(coordinate) {
      var width = panelRect.width,
        height = panelRect.height;
      var x = coordinate.x,
        y = coordinate.y;
      var saturation = Math.round(x / width * 100);
      var value = Math.round((1 - y / height) * 100);
      return {
        saturation: saturation,
        value: value
      };
    };
    var handleDrag = function handleDrag(coordinate, isEnded) {
      if (props.disabled) {
        return;
      }
      var _getSaturationAndValu = getSaturationAndValueByCoordinate(coordinate),
        saturation = _getSaturationAndValu.saturation,
        value = _getSaturationAndValu.value;
      props.onChange({
        saturation: saturation / 100,
        value: value / 100,
        addUsedColor: isEnded
      });
    };
    var handleDragEnd = function handleDragEnd(coordinate) {
      if (props.disabled) {
        return;
      }
      nextTick(function () {
        handleDrag(coordinate, true);
      });
    };
    var panelBackground = computed(function () {
      return "hsl(".concat(props.color.hue, ", 100%, 50%)");
    });
    onMounted(function () {
      panelRect.width = refPanel.value.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
      panelRect.height = refPanel.value.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
      dragInstance.value = new Draggable(refPanel.value, {
        start: function start() {
          panelRect.width = refPanel.value.offsetWidth;
          panelRect.height = refPanel.value.offsetHeight;
        },
        drag: function drag(coordinate) {
          handleDrag(coordinate);
        },
        end: handleDragEnd
      });
    });
    onBeforeUnmount(function () {
      dragInstance.value.destroy();
    });
    return {
      baseClassName: baseClassName,
      refThumb: refThumb,
      refPanel: refPanel,
      styles: styles,
      panelBackground: panelBackground
    };
  },
  render: function render() {
    var baseClassName = this.baseClassName,
      styles = this.styles,
      panelBackground = this.panelBackground;
    return createVNode("div", {
      "class": ["".concat(baseClassName, "__saturation")],
      "ref": "refPanel",
      "style": {
        background: panelBackground
      }
    }, [createVNode("span", {
      "class": ["".concat(baseClassName, "__thumb")],
      "role": "slider",
      "tabindex": 0,
      "ref": "refThumb",
      "style": styles
    }, null)]);
  }
});

export { SaturationPanel as default };
//# sourceMappingURL=saturation.mjs.map
