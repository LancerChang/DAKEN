/**
 * tdesign v1.9.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-2af2f3cc.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-5196116b.mjs';
import { isVNode, defineComponent, toRefs, ref, computed, nextTick, createVNode, mergeProps } from 'vue';
import props from './props.mjs';
import { Input } from '../input/index.mjs';
import { Popup } from '../popup/index.mjs';
import useCommonClassName from '../hooks/useCommonClassName.mjs';
import AutoCompleteOptionList from './option-list.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../hooks/index.mjs';
import { useContent, useTNodeJSX } from '../hooks/tnode.mjs';
import '../_chunks/dep-ca297029.mjs';
import '../_chunks/dep-26ed0cac.mjs';
import '../input/input.mjs';
import '../_chunks/dep-bc36f9a0.mjs';
import 'tdesign-icons-vue-next';
import '../input/props.mjs';
import '../hooks/useDisabled.mjs';
import '../_chunks/dep-3b219639.mjs';
import '../_chunks/dep-0659d768.mjs';
import '../_chunks/dep-f731006d.mjs';
import '../_chunks/dep-de53e2e8.mjs';
import '../hooks/useConfig.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../input/useInput.mjs';
import '../form/const.mjs';
import '../input/useLengthLimit.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-0714c768.mjs';
import '../_chunks/dep-78b9feac.mjs';
import '../_chunks/dep-9672d334.mjs';
import '../_chunks/dep-6bcf8998.mjs';
import '../_chunks/dep-eb726c0b.mjs';
import '../_chunks/dep-1bbef55d.mjs';
import '../_chunks/dep-44a188ed.mjs';
import '../_chunks/dep-79da3af4.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../hooks/useResizeObserver.mjs';
import '../input/input-group.mjs';
import '../input/input-group-props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../input/type.mjs';
import '../_chunks/dep-c35bb50c.mjs';
import '../_chunks/dep-e242a06a.mjs';
import '../_chunks/dep-8f5d66bf.mjs';
import '../_chunks/dep-4fb87459.mjs';
import '../_chunks/dep-2a05de08.mjs';
import '../_chunks/dep-4ee5e119.mjs';
import '../_chunks/dep-fe843970.mjs';
import '../_chunks/dep-ea111861.mjs';
import '../_chunks/dep-b59c8c62.mjs';
import '../_chunks/dep-5f0aedd7.mjs';
import '../_chunks/dep-5cb3d4ea.mjs';
import '../_chunks/dep-2d33c97a.mjs';
import '../_chunks/dep-183c499b.mjs';
import '../_chunks/dep-4e2e86d1.mjs';
import '../_chunks/dep-b76458c6.mjs';
import '../_chunks/dep-616c78b0.mjs';
import '../_chunks/dep-8ad6255c.mjs';
import '../_chunks/dep-ac0f9138.mjs';
import '../_chunks/dep-c1b8140c.mjs';
import '../_chunks/dep-766c643b.mjs';
import '../_chunks/dep-8ce99060.mjs';
import '../_chunks/dep-39423da8.mjs';
import '../_chunks/dep-de4bb4cb.mjs';
import '../_chunks/dep-f9e3f698.mjs';
import '../_chunks/dep-5654af14.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-2b12f580.mjs';
import '../_chunks/dep-2a58ca94.mjs';
import '../_chunks/dep-115707a4.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-8fde58dd.mjs';
import '../_chunks/dep-5b49f687.mjs';
import '../_chunks/dep-7d3c27b1.mjs';
import '../_chunks/dep-4ab8ef1f.mjs';
import '../_chunks/dep-dee62ba9.mjs';
import '../_chunks/dep-91b73ccb.mjs';
import '../_chunks/dep-e6085593.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-91bceb4f.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_common/js/upload/utils.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../_chunks/dep-41d56db9.mjs';
import '../_chunks/dep-3d661c92.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../popup/props.mjs';
import '../popup/type.mjs';
import '../_chunks/dep-c6a4c516.mjs';
import '../_common/js/common.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _AutoComplete = defineComponent({
  name: "TAutoComplete",
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var _toRefs = toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      tValue = _useVModel2[0],
      setTValue = _useVModel2[1];
    var renderContent = useContent();
    var renderTNodeJSX = useTNodeJSX();
    var _useCommonClassName = useCommonClassName(),
      classPrefix = _useCommonClassName.classPrefix,
      sizeClassNames = _useCommonClassName.sizeClassNames;
    var _useConfig = useConfig("input"),
      global = _useConfig.globalConfig;
    var popupVisible = ref();
    var optionListRef = ref();
    var getOverlayStyle = function getOverlayStyle(trigger, popupElement) {
      var _props2$popupProps;
      var triggerWidth = trigger.getBoundingClientRect().width || trigger.offsetWidth || trigger.clientWidth;
      var popupWidth = popupElement.getBoundingClientRect().width || popupElement.offsetWidth || popupElement.clientWidth;
      return _objectSpread({
        width: triggerWidth >= popupWidth ? "".concat(triggerWidth, "px") : "auto"
      }, (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.overlayInnerStyle);
    };
    var classes = computed(function () {
      return ["".concat(classPrefix.value, "-auto-complete")];
    });
    var popupClasses = computed(function () {
      var _props2$popupProps2;
      var classes2 = ["".concat(classPrefix.value, "-select__dropdown")];
      if ((_props2$popupProps2 = props2.popupProps) !== null && _props2$popupProps2 !== void 0 && _props2$popupProps2.overlayClassName) {
        classes2 = classes2.concat(props2.popupProps.overlayClassName);
      }
      return classes2;
    });
    var popupInnerClasses = computed(function () {
      var _props2$popupProps3;
      var classes2 = ["".concat(classPrefix.value, "-select__dropdown-inner")];
      if ((_props2$popupProps3 = props2.popupProps) !== null && _props2$popupProps3 !== void 0 && _props2$popupProps3.overlayInnerClassName) {
        classes2 = classes2.concat(props2.popupProps.overlayInnerClassName);
      }
      return classes2;
    });
    var onInputChange = function onInputChange(value2, context) {
      setTValue(value2, context);
    };
    var innerInputProps = computed(function () {
      var tProps = _objectSpread({
        value: tValue.value,
        size: props2.size
      }, props2.inputProps);
      return tProps;
    });
    var onInnerFocus = function onInnerFocus(value2, context) {
      var _props2$onFocus;
      popupVisible.value = true;
      (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, _objectSpread(_objectSpread({}, context), {}, {
        value: value2
      }));
      nextTick(function () {
        var _optionListRef$value;
        (_optionListRef$value = optionListRef.value) === null || _optionListRef$value === void 0 || _optionListRef$value.addKeyboardListener();
      });
    };
    var onInnerBlur = function onInnerBlur(value2, context) {
      var _props2$onBlur;
      (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, _objectSpread(_objectSpread({}, context), {}, {
        value: value2
      }));
    };
    var onInnerCompositionend = function onInnerCompositionend(value2, context) {
      var _props2$onComposition;
      (_props2$onComposition = props2.onCompositionend) === null || _props2$onComposition === void 0 || _props2$onComposition.call(props2, _objectSpread(_objectSpread({}, context), {}, {
        value: value2
      }));
    };
    var onInnerCompositionstart = function onInnerCompositionstart(value2, context) {
      var _props2$onComposition2;
      (_props2$onComposition2 = props2.onCompositionstart) === null || _props2$onComposition2 === void 0 || _props2$onComposition2.call(props2, _objectSpread(_objectSpread({}, context), {}, {
        value: value2
      }));
    };
    var onInnerEnter = function onInnerEnter(value2, context) {
      var _props2$onEnter;
      (_props2$onEnter = props2.onEnter) === null || _props2$onEnter === void 0 || _props2$onEnter.call(props2, _objectSpread(_objectSpread({}, context), {}, {
        value: value2
      }));
    };
    var onInnerSelect = function onInnerSelect(value2, context) {
      var _props2$onSelect;
      if (props2.readonly || props2.disabled) return;
      popupVisible.value = false;
      setTValue(value2, context);
      (_props2$onSelect = props2.onSelect) === null || _props2$onSelect === void 0 || _props2$onSelect.call(props2, value2, context);
    };
    var onPopupVisibleChange = function onPopupVisibleChange(visible, _ref2) {
      var trigger = _ref2.trigger;
      if (trigger !== "trigger-element-click") {
        popupVisible.value = visible;
      }
    };
    return function () {
      var _props2$placeholder, _props2$options;
      var triggerNode = renderContent("default", "triggerElement") || createVNode(Input, mergeProps({
        "borderless": props2.borderless,
        "placeholder": (_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : global.value.placeholder,
        "tips": props2.tips,
        "status": props2.status,
        "readonly": props2.readonly,
        "disabled": props2.disabled,
        "autofocus": props2.autofocus,
        "clearable": props2.clearable,
        "onChange": onInputChange,
        "onFocus": onInnerFocus,
        "onBlur": onInnerBlur,
        "onClear": props2.onClear,
        "onCompositionend": onInnerCompositionend,
        "onCompositionstart": onInnerCompositionstart,
        "onEnter": onInnerEnter
      }, innerInputProps.value), slots);
      var listContent = createVNode(AutoCompleteOptionList, {
        "ref": optionListRef,
        "value": tValue.value,
        "options": props2.options,
        "size": props2.size,
        "sizeClassNames": sizeClassNames,
        "onSelect": onInnerSelect,
        "popupVisible": popupVisible.value,
        "highlightKeyword": props2.highlightKeyword,
        "filterable": props2.filterable,
        "filter": props2.filter
      }, {
        option: slots.option
      });
      var topContent = renderTNodeJSX("panelTopContent");
      var bottomContent = renderTNodeJSX("panelBottomContent");
      var panelContent = Boolean(topContent || ((_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.length) || bottomContent) ? createVNode("div", {
        "class": "".concat(classPrefix.value, "-autocomplete__panel")
      }, [topContent, listContent, bottomContent]) : null;
      var popupProps = _objectSpread(_objectSpread({}, props2.popupProps), {}, {
        overlayInnerStyle: getOverlayStyle,
        overlayInnerClassName: popupInnerClasses.value,
        overlayClassName: popupClasses.value
      });
      return createVNode("div", {
        "class": classes.value
      }, [createVNode(Popup, mergeProps({
        "visible": popupVisible.value,
        "onVisibleChange": onPopupVisibleChange,
        "trigger": "focus",
        "placement": "bottom-left",
        "hideEmptyPopup": true,
        "content": panelContent ? function () {
          return panelContent;
        } : null
      }, popupProps), _isSlot(triggerNode) ? triggerNode : {
        "default": function _default() {
          return [triggerNode];
        }
      })]);
    };
  }
});

export { _AutoComplete as default };
//# sourceMappingURL=auto-complete.mjs.map
