/**
 * tdesign v1.9.5
 * (c) 2024 tdesign
 * @license MIT
 */

import { isVNode, defineComponent, inject, ref, computed, createVNode, mergeProps, Fragment } from 'vue';
import { o as omit_1 } from '../_chunks/dep-7966403d.mjs';
import _Option from './option.mjs';
import _OptionGroup from './optionGroup.mjs';
import props from './props.mjs';
import { useTNodeJSX, useTNodeDefault } from '../hooks/tnode.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { usePanelVirtualScroll } from './hooks/usePanelVirtualScroll.mjs';
import { selectInjectKey } from './helper.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-0659d768.mjs';
import '../_chunks/dep-5b49f687.mjs';
import '../_chunks/dep-f731006d.mjs';
import '../_chunks/dep-ca297029.mjs';
import '../_chunks/dep-9672d334.mjs';
import '../_chunks/dep-6bcf8998.mjs';
import '../_chunks/dep-7d3c27b1.mjs';
import '../_chunks/dep-de53e2e8.mjs';
import '../_chunks/dep-4fb87459.mjs';
import '../_chunks/dep-2a05de08.mjs';
import '../_chunks/dep-4ee5e119.mjs';
import '../_chunks/dep-fe843970.mjs';
import '../_chunks/dep-c35bb50c.mjs';
import '../_chunks/dep-79da3af4.mjs';
import '../_chunks/dep-e242a06a.mjs';
import '../_chunks/dep-ea111861.mjs';
import '../_chunks/dep-b59c8c62.mjs';
import '../_chunks/dep-5f0aedd7.mjs';
import '../_chunks/dep-5cb3d4ea.mjs';
import '../_chunks/dep-2d33c97a.mjs';
import '../_chunks/dep-183c499b.mjs';
import '../_chunks/dep-4e2e86d1.mjs';
import '../_chunks/dep-b76458c6.mjs';
import '../_chunks/dep-616c78b0.mjs';
import '../_chunks/dep-8ad6255c.mjs';
import '../_chunks/dep-ac0f9138.mjs';
import '../_chunks/dep-c1b8140c.mjs';
import '../_chunks/dep-f5778e4b.mjs';
import '../_chunks/dep-8ea10f6c.mjs';
import '../_chunks/dep-dee62ba9.mjs';
import '../_chunks/dep-f9e3f698.mjs';
import '../_chunks/dep-0dc95788.mjs';
import '../_chunks/dep-de4bb4cb.mjs';
import '../_chunks/dep-39423da8.mjs';
import '../_chunks/dep-0714c768.mjs';
import '../_chunks/dep-26ed0cac.mjs';
import '../_chunks/dep-2af2f3cc.mjs';
import './option-props.mjs';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../_chunks/dep-5196116b.mjs';
import '../checkbox/props.mjs';
import '../hooks/useVModel.mjs';
import '../_chunks/dep-e6085593.mjs';
import '../_chunks/dep-91b73ccb.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-766c643b.mjs';
import '../_chunks/dep-8ce99060.mjs';
import '../_chunks/dep-5654af14.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-2b12f580.mjs';
import '../_chunks/dep-2a58ca94.mjs';
import '../_chunks/dep-115707a4.mjs';
import '../utils/set-style.mjs';
import '../_chunks/dep-8f5d66bf.mjs';
import '../_chunks/dep-78b9feac.mjs';
import '../config-provider/type.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';
import '../checkbox/hooks/useKeyboardEvent.mjs';
import '../_common/js/common.mjs';
import '../hooks/useDisabled.mjs';
import '../_chunks/dep-3b219639.mjs';
import '../_chunks/dep-8fde58dd.mjs';
import '../_chunks/dep-4ab8ef1f.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-91bceb4f.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-a13534db.mjs';
import '../_chunks/dep-e33169b8.mjs';
import '../_chunks/dep-4c5036fd.mjs';
import '../_chunks/dep-1bbef55d.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../checkbox/type.mjs';
import './option-group-props.mjs';
import '../hooks/useVirtualScroll.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var SelectPanel = defineComponent({
  name: "TSelectPanel",
  props: {
    inputValue: props.inputValue,
    panelTopContent: props.panelTopContent,
    panelBottomContent: props.panelBottomContent,
    empty: props.empty,
    creatable: props.creatable,
    loading: props.loading,
    loadingText: props.loadingText,
    multiple: props.multiple,
    filterable: props.filterable,
    filter: props.filter,
    scroll: props.scroll,
    size: props.size
  },
  setup: function setup(props, _ref) {
    var expose = _ref.expose;
    var COMPONENT_NAME = usePrefixClass("select");
    var renderTNodeJSX = useTNodeJSX();
    var renderDefaultTNode = useTNodeDefault();
    var _useConfig = useConfig("select"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var tSelect = inject(selectInjectKey);
    var innerRef = ref(null);
    var popupContentRef = computed(function () {
      return tSelect.value.popupContentRef.value;
    });
    var showCreateOption = computed(function () {
      return props.creatable && props.filterable && props.inputValue;
    });
    var displayOptions = computed(function () {
      return tSelect.value.displayOptions;
    });
    var _usePanelVirtualScrol = usePanelVirtualScroll({
        scroll: props.scroll,
        popupContentRef: popupContentRef,
        options: displayOptions
      }),
      trs = _usePanelVirtualScrol.trs,
      visibleData = _usePanelVirtualScrol.visibleData,
      handleRowMounted = _usePanelVirtualScrol.handleRowMounted,
      isVirtual = _usePanelVirtualScrol.isVirtual,
      panelStyle = _usePanelVirtualScrol.panelStyle,
      cursorStyle = _usePanelVirtualScrol.cursorStyle;
    var isEmpty = computed(function () {
      return !displayOptions.value.length;
    });
    var renderCreateOption = function renderCreateOption() {
      return createVNode("ul", {
        "class": ["".concat(COMPONENT_NAME.value, "__create-option"), "".concat(COMPONENT_NAME.value, "__list")]
      }, [createVNode(_Option, {
        "value": props.inputValue,
        "label": "".concat(props.inputValue),
        "createAble": true,
        "class": "".concat(COMPONENT_NAME.value, "__create-option--special")
      }, null)]);
    };
    var renderOptionsContent = function renderOptionsContent(options) {
      return createVNode("ul", {
        "class": "".concat(COMPONENT_NAME.value, "__list")
      }, [options.map(function (item, index) {
        var _props$scroll, _props$scroll2;
        if (item.group) {
          var _slot;
          return createVNode(_OptionGroup, {
            "label": item.group,
            "divider": item.divider
          }, _isSlot(_slot = renderOptionsContent(item.children)) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        }
        return createVNode(_Option, mergeProps(omit_1(item, "index", "$index", "className", "tagName"), isVirtual.value ? {
          rowIndex: item.$index,
          trs: trs,
          scrollType: (_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type,
          isVirtual: isVirtual.value,
          bufferSize: (_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.bufferSize,
          key: "".concat(item.$index || "", "_").concat(index)
        } : {
          key: "".concat(index, "_").concat(item.value)
        }, {
          "index": index,
          "multiple": props.multiple,
          "onRowMounted": handleRowMounted
        }), item.slots);
      })]);
    };
    var dropdownInnerSize = computed(function () {
      return {
        small: "s",
        medium: "m",
        large: "l"
      }[tSelect.value.size];
    });
    expose({
      innerRef: innerRef,
      visibleData: visibleData,
      isVirtual: isVirtual,
      displayOptions: displayOptions
    });
    var renderPanel = function renderPanel(options, extraStyle) {
      return createVNode("div", {
        "ref": innerRef,
        "class": ["".concat(COMPONENT_NAME.value, "__dropdown-inner"), "".concat(COMPONENT_NAME.value, "__dropdown-inner--size-").concat(dropdownInnerSize.value)],
        "style": extraStyle
      }, [showCreateOption.value && renderCreateOption(), props.loading && renderDefaultTNode("loadingText", {
        defaultNode: createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__loading-tips")
        }, [t(globalConfig.value.loadingText)])
      }), !props.loading && isEmpty.value && !showCreateOption.value && renderDefaultTNode("empty", {
        defaultNode: createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__empty")
        }, [t(globalConfig.value.empty)])
      }), !isEmpty.value && !props.loading && renderOptionsContent(options)]);
    };
    return {
      renderPanel: renderPanel,
      panelStyle: panelStyle,
      cursorStyle: cursorStyle,
      isVirtual: isVirtual,
      displayOptions: displayOptions,
      visibleData: visibleData,
      renderTNodeJSX: renderTNodeJSX
    };
  },
  render: function render() {
    return this.isVirtual ? createVNode(Fragment, null, [this.renderTNodeJSX("panelTopContent"), createVNode("div", null, [createVNode("div", {
      "style": this.cursorStyle
    }, null), this.renderPanel(this.visibleData, this.panelStyle)]), this.renderTNodeJSX("panelBottomContent")]) : createVNode(Fragment, null, [this.renderTNodeJSX("panelTopContent"), this.renderPanel(this.displayOptions), this.renderTNodeJSX("panelBottomContent")]);
  }
});

export { SelectPanel as default };
//# sourceMappingURL=select-panel.mjs.map
